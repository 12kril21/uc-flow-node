import ujson
from typing import List, Tuple

from uc_flow_nodes.schemas import NodeRunContext
from uc_flow_nodes.service import NodeService
from uc_flow_nodes.views import info, execute
from uc_flow_schemas import flow
from uc_flow_schemas.flow import Property, CredentialProtocol, RunState
from uc_http_requester.requester import Request
from uc_flow_schemas.flow import OptionValue
from uc_flow_schemas.flow import DisplayOptions

class NodeType(flow.NodeType):
    id: str = '97cc87fc-ae4e-4bcc-9481-7cb2aeba16db' #–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ —É–∑–ª–∞
    type: flow.NodeType.Type = flow.NodeType.Type.action
    name: str = 'OrderProcessor' #–¢–µ—Ö –∏–º—è —É–∑–ª–∞
    is_public: bool = False
    displayName: str = '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤' # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É–∑–ª–∞
    icon: str = '<svg><text x="8" y="50" font-size="50">ü§ñ</text></svg>'
    description: str = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏' #–û–ø–∏—Å–∞–Ω–∏–µ —É–∑–ª–∞
    properties: List[Property] = [
        Property(
            displayName='–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ',
            name='foo_field',
            type=Property.Type.JSON,
            placeholder='Foo placeholder',
            description='Foo description',
            required=True,
            default='Test data',
        ),
        Property(
            displayName='–ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ',
            name='number_field',
            type=Property.Type.NUMBER,
            required=True,
        ),
        Property(
            displayName='–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ',
            name='text_field',
            type=Property.Type.STRING,
            required=True,
        ),
        Property(
            displayName='–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å',
            name='toggle',
            type=Property.Type.BOOLEAN,
            required=False,
            default=False,
        ),
        Property(
            displayName='–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å2',
            name='toggle2',
            type=Property.Type.BOOLEAN,
            default=False,
        ),
        Property(
            displayName='–í—ã–±–æ—Ä 1',
            name='choice_one',
            type=Property.Type.OPTIONS,
            options=[
                OptionValue(name='–ó–Ω–∞—á–µ–Ω–∏–µ 1', value='value1'),
                OptionValue(name='–ó–Ω–∞—á–µ–Ω–∏–µ 2', value='value2')
            ],
            displayOptions=DisplayOptions(
                show={'toggle2': [True]},  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω
            ),
        ),
        Property(
            displayName='–í—ã–±–æ—Ä 2',
            name='choice_two',
            type=Property.Type.OPTIONS,
            options=[
                OptionValue(name='–ó–Ω–∞—á–µ–Ω–∏–µ 1', value='value1'),
                OptionValue(name='–ó–Ω–∞—á–µ–Ω–∏–µ 2', value='value2')
            ],
            displayOptions=DisplayOptions(
                show={'toggle2': [True]},  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω
            ),
        ),

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
        Property(
            displayName='Email',
            name='email_field',
            type=Property.Type.STRING,
            displayOptions=DisplayOptions(
                show={
                    'choice_one': ['value1'],  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –µ—Å–ª–∏ –≤ –ø–µ—Ä–≤–æ–º —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–æ "–ó–Ω–∞—á–µ–Ω–∏–µ 1"
                    'choice_two': ['value1'],
                    'toggle2': [True] # –∏ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ø–∏—Å–∫–µ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞–Ω–æ "–ó–Ω–∞—á–µ–Ω–∏–µ 1"
                },
            ),
        ),
        Property(
            displayName='–î–∞—Ç–∞ –∏ –í—Ä–µ–º—è',
            name='date_time_field',
            type=Property.Type.DATETIME,
            displayOptions=DisplayOptions(
                show={
                    'choice_one': ['value2'],  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –µ—Å–ª–∏ –≤ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–æ "–ó–Ω–∞—á–µ–Ω–∏–µ 2"
                    'choice_two': ['value2'],
                    'toggle2': [True]
                },
            ),
        ),
        ]


class InfoView(info.Info):
    class Response(info.Info.Response):
        node_type: NodeType


class ExecuteView(execute.Execute):
    async def post(self, json: NodeRunContext) -> NodeRunContext:
        try:
            text_value = int(json.node.data.properties['text_field'])
            number_value = json.node.data.properties['number_field']
            toggle = json.node.data.properties['toggle']
            
            result = text_value + number_value
            if toggle:
                result = str(text_value + number_value)
            else:
                result = text_value + number_value    
            
            await json.save_result({"result": result})
            json.state = RunState.complete

        except Exception as e:
            self.log.warning(f'Error {e}')
            await json.save_error(str(e))
            json.state = RunState.error
        return json


class Service(NodeService):
    class Routes(NodeService.Routes):
        Info = InfoView
        Execute = ExecuteView
